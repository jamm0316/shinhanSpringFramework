<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd">
    <context:component-scan base-package="com.shinhan.myapp"/>

    <!--    <bean-->
    <!--            class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
    <!--        <property name="location"-->
    <!--                  value="/WEB-INF/spring/appServlet/oracleDB.properties"/>-->
    <!--        <property name="fileEncoding" value="UTF-8"/>-->
    <!--    </bean>-->

    <!--properties 설정파일 위치를 지정(dataSource, configLocation, mapper-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>/WEB-INF/spring/appServlet/oracleDB.properties</value>
                <value>classpath:/application.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>

    <!--Connection Pooling 이용하기-->
<!--    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">-->
<!--        <property name="driverClassName" value="${driverClassName}"/>-->
<!--        <property name="url" value="${url}"/>-->
<!--        <property name="username" value="${username}"/>-->
<!--        <property name="password" value="${password}"/>-->
<!--    </bean>-->

    <!--sqlSession을 생성해준다.-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml" />
        <property name="mapperLocations" value="classpath:mybatis/mappers/**/*.xml" />
    </bean>

    <!--sql문을 실행하여 DB객체와 자바객체를 mapping해준다-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"></constructor-arg>
    </bean>


<!--    JDNI 이용하기-->
<!--    <jee:jndi-lookup-->
<!--            id="dataSource"-->
<!--            resource-ref="true"-->
<!--            jndi-name="jdbc/myoracle"></jee:jndi-lookup>-->


<!--    <bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource" primary="true">-->
<!--        <constructor-arg ref="dataSourceOriginal" />-->
<!--        <property name="logFormatter" >-->
<!--            <bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">-->
<!--                <property name="loggingType" value="MULTI_LINE"></property>-->
<!--                <property name="sqlPrefix" value="[ SQL문장 ] "></property>-->
<!--            </bean>-->
<!--        </property>-->
<!--    </bean>-->

    <!--    DriverManager 이용하기-->
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${driverClassName}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>
</beans>